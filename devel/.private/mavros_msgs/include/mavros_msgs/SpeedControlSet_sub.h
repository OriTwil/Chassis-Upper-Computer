// Generated by gencpp from file mavros_msgs/SpeedControlSet_sub.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_SPEEDCONTROLSET_SUB_H
#define MAVROS_MSGS_MESSAGE_SPEEDCONTROLSET_SUB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct SpeedControlSet_sub_
{
  typedef SpeedControlSet_sub_<ContainerAllocator> Type;

  SpeedControlSet_sub_()
    : vx_set_sub(0.0)
    , vy_set_sub(0.0)
    , vw_set_sub(0.0)
    , x_set_sub(0.0)
    , y_set_sub(0.0)  {
    }
  SpeedControlSet_sub_(const ContainerAllocator& _alloc)
    : vx_set_sub(0.0)
    , vy_set_sub(0.0)
    , vw_set_sub(0.0)
    , x_set_sub(0.0)
    , y_set_sub(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_set_sub_type;
  _vx_set_sub_type vx_set_sub;

   typedef float _vy_set_sub_type;
  _vy_set_sub_type vy_set_sub;

   typedef float _vw_set_sub_type;
  _vw_set_sub_type vw_set_sub;

   typedef float _x_set_sub_type;
  _x_set_sub_type x_set_sub;

   typedef float _y_set_sub_type;
  _y_set_sub_type y_set_sub;





  typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedControlSet_sub_

typedef ::mavros_msgs::SpeedControlSet_sub_<std::allocator<void> > SpeedControlSet_sub;

typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSet_sub > SpeedControlSet_subPtr;
typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSet_sub const> SpeedControlSet_subConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator1> & lhs, const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator2> & rhs)
{
  return lhs.vx_set_sub == rhs.vx_set_sub &&
    lhs.vy_set_sub == rhs.vy_set_sub &&
    lhs.vw_set_sub == rhs.vw_set_sub &&
    lhs.x_set_sub == rhs.x_set_sub &&
    lhs.y_set_sub == rhs.y_set_sub;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator1> & lhs, const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad82db84ef54bcd533c01136895f6b3e";
  }

  static const char* value(const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad82db84ef54bcd5ULL;
  static const uint64_t static_value2 = 0x33c01136895f6b3eULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/SpeedControlSet_sub";
  }

  static const char* value(const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx_set_sub\n"
"float32 vy_set_sub\n"
"float32 vw_set_sub\n"
"\n"
"float32 x_set_sub\n"
"float32 y_set_sub\n"
;
  }

  static const char* value(const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx_set_sub);
      stream.next(m.vy_set_sub);
      stream.next(m.vw_set_sub);
      stream.next(m.x_set_sub);
      stream.next(m.y_set_sub);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedControlSet_sub_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::SpeedControlSet_sub_<ContainerAllocator>& v)
  {
    s << indent << "vx_set_sub: ";
    Printer<float>::stream(s, indent + "  ", v.vx_set_sub);
    s << indent << "vy_set_sub: ";
    Printer<float>::stream(s, indent + "  ", v.vy_set_sub);
    s << indent << "vw_set_sub: ";
    Printer<float>::stream(s, indent + "  ", v.vw_set_sub);
    s << indent << "x_set_sub: ";
    Printer<float>::stream(s, indent + "  ", v.x_set_sub);
    s << indent << "y_set_sub: ";
    Printer<float>::stream(s, indent + "  ", v.y_set_sub);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_SPEEDCONTROLSET_SUB_H
