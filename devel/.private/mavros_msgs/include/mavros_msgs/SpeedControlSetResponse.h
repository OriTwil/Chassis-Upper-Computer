// Generated by gencpp from file mavros_msgs/SpeedControlSetResponse.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_SPEEDCONTROLSETRESPONSE_H
#define MAVROS_MSGS_MESSAGE_SPEEDCONTROLSETRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct SpeedControlSetResponse_
{
  typedef SpeedControlSetResponse_<ContainerAllocator> Type;

  SpeedControlSetResponse_()
    : send_success(false)  {
    }
  SpeedControlSetResponse_(const ContainerAllocator& _alloc)
    : send_success(false)  {
  (void)_alloc;
    }



   typedef uint8_t _send_success_type;
  _send_success_type send_success;





  typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedControlSetResponse_

typedef ::mavros_msgs::SpeedControlSetResponse_<std::allocator<void> > SpeedControlSetResponse;

typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetResponse > SpeedControlSetResponsePtr;
typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetResponse const> SpeedControlSetResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator1> & lhs, const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator2> & rhs)
{
  return lhs.send_success == rhs.send_success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator1> & lhs, const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56d282e179c5c746013c5b1090241cab";
  }

  static const char* value(const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56d282e179c5c746ULL;
  static const uint64_t static_value2 = 0x013c5b1090241cabULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/SpeedControlSetResponse";
  }

  static const char* value(const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool send_success\n"
;
  }

  static const char* value(const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.send_success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct catkin b

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::SpeedControlSetResponse_<ContainerAllocator>& v)
  {
    s << indent << "send_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.send_success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_SPEEDCONTROLSETRESPONSE_H
