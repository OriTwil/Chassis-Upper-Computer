// Generated by gencpp from file mavros_msgs/SpeedControlSetRequest.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_SPEEDCONTROLSETREQUEST_H
#define MAVROS_MSGS_MESSAGE_SPEEDCONTROLSETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct SpeedControlSetRequest_
{
  typedef SpeedControlSetRequest_<ContainerAllocator> Type;

  SpeedControlSetRequest_()
    : vx_set(0.0)
    , vy_set(0.0)
    , vw_set(0.0)  {
    }
  SpeedControlSetRequest_(const ContainerAllocator& _alloc)
    : vx_set(0.0)
    , vy_set(0.0)
    , vw_set(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_set_type;
  _vx_set_type vx_set;

   typedef float _vy_set_type;
  _vy_set_type vy_set;

   typedef float _vw_set_type;
  _vw_set_type vw_set;





  typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedControlSetRequest_

typedef ::mavros_msgs::SpeedControlSetRequest_<std::allocator<void> > SpeedControlSetRequest;

typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetRequest > SpeedControlSetRequestPtr;
typedef boost::shared_ptr< ::mavros_msgs::SpeedControlSetRequest const> SpeedControlSetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vx_set == rhs.vx_set &&
    lhs.vy_set == rhs.vy_set &&
    lhs.vw_set == rhs.vw_set;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator1> & lhs, const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c534057ba0143748321db675c6edc6f5";
  }

  static const char* value(const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc534057ba0143748ULL;
  static const uint64_t static_value2 = 0x321db675c6edc6f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/SpeedControlSetRequest";
  }

  static const char* value(const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx_set\n"
"float32 vy_set\n"
"float32 vw_set\n"
"\n"
;
  }

  static const char* value(const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx_set);
      stream.next(m.vy_set);
      stream.next(m.vw_set);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedControlSetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::SpeedControlSetRequest_<ContainerAllocator>& v)
  {
    s << indent << "vx_set: ";
    Printer<float>::stream(s, indent + "  ", v.vx_set);
    s << indent << "vy_set: ";
    Printer<float>::stream(s, indent + "  ", v.vy_set);
    s << indent << "vw_set: ";
    Printer<float>::stream(s, indent + "  ", v.vw_set);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_SPEEDCONTROLSETREQUEST_H
